#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen import Transaction
from thrift_gen.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string transfer(i32 payload, i32 target)')
    print('  void crypto_transfer(string owner, i32 amount, string receiver, string challenge, string signature)')
    print('  Status status(string tx_id)')
    print('  i32 balance(string address)')
    print('  string challenge()')
    print('   balance_history(string ownerId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Transaction.Client(protocol)
transport.open()

if cmd == 'transfer':
    if len(args) != 2:
        print('transfer requires 2 args')
        sys.exit(1)
    pp.pprint(client.transfer(eval(args[0]), eval(args[1]),))

elif cmd == 'crypto_transfer':
    if len(args) != 5:
        print('crypto_transfer requires 5 args')
        sys.exit(1)
    pp.pprint(client.crypto_transfer(args[0], eval(args[1]), args[2], args[3], args[4],))

elif cmd == 'status':
    if len(args) != 1:
        print('status requires 1 args')
        sys.exit(1)
    pp.pprint(client.status(args[0],))

elif cmd == 'balance':
    if len(args) != 1:
        print('balance requires 1 args')
        sys.exit(1)
    pp.pprint(client.balance(args[0],))

elif cmd == 'challenge':
    if len(args) != 0:
        print('challenge requires 0 args')
        sys.exit(1)
    pp.pprint(client.challenge())

elif cmd == 'balance_history':
    if len(args) != 1:
        print('balance_history requires 1 args')
        sys.exit(1)
    pp.pprint(client.balance_history(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
